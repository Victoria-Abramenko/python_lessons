# # # ______  Задание 163  ______
# # На вход программе подаются целые числа, записанные через пробел. Необходимо их прочитать и с помощью list
# # comprehension сформировать двумерный список lst размером N x N (квадратную таблицу чисел). Гарантируется, что из набора
# # введенных чисел можно сформировать квадратную матрицу (таблицу). Полученный двумерный список отобразить командой:
# # print(lst)
# numbers = list(map(int, input().split()))  # 1 2 3 4 5 6 7 8 9
# n = int(len(numbers) ** 0.5)
# lst = [numbers[i * n: i * n + n] for i in range(n)]
# print(lst)

# # другое интересное решение
# numbers = list(map(int, input().split()))  # 1 2 3 4 5 6 7 8 9
# n = int(len(numbers) ** 0.5)
# it = iter(numbers)
# lst = [[next(it) for j in range(n)] for i in range(n)]
# print(lst)

# # # ______  Задание 164  ______
# # Объявите в программе следующий список из строк:
# # t = ["– Скажи-ка, дядя, ведь не даром",
# #     "Я Python выучил с каналом",
# #     "Балакирев что раздавал?",
# #     "Ведь были ж заданья боевые,",
# #     "Да, говорят, еще какие!",
# #     "Недаром помнит вся Россия",
# #     "Как мы рубили их тогда!"
# #     ]
# # Необходимо преобразовать его в двумерный (вложенный) список lst, где каждая строка представляется списком из слов
# # (слова разделяются пробелом), но сохранять слова только длиной более трех символов. Решить данную задачу следует с
# # использованием list comprehension. Результат отобразить с помощью команды:
# # print(lst)
# # То есть, на выходе список должен быть:
# # [['Скажи-ка,', 'дядя,', 'ведь', 'даром'], ...]
# t = ["– Скажи-ка, дядя, ведь не даром",
#     "Я Python выучил с каналом",
#     "Балакирев что раздавал?",
#     "Ведь были ж заданья боевые,",
#     "Да, говорят, еще какие!",
#     "Недаром помнит вся Россия",
#     "Как мы рубили их тогда!"
#     ]
# lst = [[x for x in i.split() if len(x) > 3
# ] for i in t]
# print(lst)

# # # ______  Задание 165  ______
# #  Повторите задачу с транспонированием прямоугольной матрицы с помощью list comprehension, изложенной в видео-уроке
# #  к этой практике. На вход программе поступает таблица целых чисел, чтение которой уже реализовано в программе:
# # s = sys.stdin.readlines()
# # lst_in = [list(map(int, x.strip().split())) for x in s]
# # Нужно транспонировать список lst_in (строки заменяются на столбцы) и результат сохранить в списке A. Отобразите
# # полученный список A с помощью следующей конструкции:
# # for row in A:
# #     print(*row)
# # Желательно сделать эту задачу не пересматривая видео.
# lst_in = [[1, 2, 3],
#      [4, 5, 6],
#      [7, 8, 9],
#      [5, 4, 3]]
#
# A = [[row[i] for row in lst_in]
#      for i in range(len(lst_in[0]))
# ]
# for row in A:
#     print(*row)
# # 1 4 7 5
# # 2 5 8 4
# # 3 6 9 3

# # # ______  Задание 166  ______
# #  На вход программе подаются данные в формате ключ=значение, записанные через пробел. Значениями здесь являются целые
# #  числа (см. пример ниже). Необходимо прочитать строку с этими данными и на их основе сформировать словарь d, используя
# #  функцию dict(). Результирующий словарь вывести на экран командой:
# # print(*sorted(d.items()))
# lst = list(input().split())  # one=1 two=2 three=3
# lst_1 = [i.split('=') for i in lst]
# for i in range(len(lst_1)):
#     for j in range(2):
#         if j == 1:
#             lst_1[i][j] = int(lst_1[i][j])
# d = dict(lst_1)
# print(*sorted(d.items()))  # ('one', 1) ('three', 3) ('two', 2)

# # # ______  Задание 167  ______
# # На вход программе поступают данные в виде набора строк в формате:
# # ключ1=значение1
# # ключ2=значение2
# # ...
# # ключN=значениеN
# # Ключами здесь выступают целые числа (см. пример ниже). В программе уже реализовано считывание всех строк и сохранение
# # их в виде списка:
# # lst_in = list(map(str.strip, sys.stdin.readlines()))
# # Необходимо преобразовать список lst_in в словарь d (без использования функции dict()) и вывести полученный словарь на
# # экран командой:
# # print(*sorted(d.items()))
# lst_in = ['5=отлично', '4=хорошо', '3=удовлетворительно']
# lst_in  = [i.split('=') for i in lst_in]
# for i in range(len(lst_in)):
#     for j in range(2):
#         if j == 0:
#             lst_in[i][j] = int(lst_in[i][j])
# d = dict(lst_in)
# print(*sorted(d.items()))

# # # ______  Задание 168  ______
# # На вход программе подаются данные в формате ключ=значение, записанные через пробел. Необходимо прочитать строку с
# # этими данными и на их основе сформировать словарь. Затем проверить, существуют ли в словаре ключи со значениями:
# # 'house', 'True' и '5' (все ключи - строки). Если все они существуют, то вывести на экран "ДА", иначе "НЕТ".
# lst_in = list(input().split())  # вологда=город house=дом True=1 5=отлично 9=божественно
# lst_1 = [i.split('=') for i in lst_in]
# d = dict(lst_1)
# if 'house' in d and 'True' in d and '5' in d:
#     print('ДА')
# else:
#     print('НЕТ')
# # ДА

# # # ______  Задание 170  ______
# # На вход программе подаются данные в формате ключ=значение, записанные через пробел. Необходимо прочитать строку с этими
# # данными и на их основе сформировать словарь d. Затем удалить из этого словаря ключи 'False' и '3', если они существуют.
# # Ключами и значениями словаря являются строки. Вывести полученный словарь на экран командой:
# # print(*sorted(d.items()))
# lst_in = [i.split('=') for i in input().split()] # лена=имя дон=река москва=город False=ложь 3=удовлетворительно True=истина
# d = dict(i for i in lst_in)
# if 'False' in d:
#     del d['False']
# if '3' in d:
#     del d['3']
# print(*sorted(d.items()))  # ('True', 'истина') ('дон', 'река') ('лена', 'имя') ('москва', 'город')

# # # ______  Задание 171  ______
# # На вход программе подаются номера телефонов, записанные в одну строчку через пробел, с разными кодами стран: +7, +6,
# # +2, +4 и т.д. Необходимо прочитать строку и на ее основе сформировать словарь d. Ключами словаря должны быть коды
# # (строки: +7, +6, +2 и т. п.), а значениями список номеров в виде строк (следующих в том же порядке, что и в исходной
# # строке) с соответствующими кодами. Полученный словарь вывести командой:
# # print(*sorted(d.items()))
# numbers = [[i[0:2], i] for i in input().split()]# +71234567890 +71234567854 +61234576890 +52134567890 +21235777890 +21234567110 +71232267890
# d = {}
# for i in numbers:
#     if i[0] in d:
#         d[i[0]].append(i[1])
#     else:
#         d[i[0]] = [i[1]]
#
# print(*sorted(d.items())) # ('+2', ['+21235777890', '+21234567110']) ('+5', ['+52134567890']) ('+6', ['+61234576890']) ('+7', ['+71234567890', '+71234567854', '+71232267890'])

# # интересное решение другого ученика
# n = input().split()
# d = dict([(x[:2], [i for i in n if x[:2] == i[:2]]) for x in n])
# print(*sorted(d.items()))

# # # ______  Задание 172  ______
# # На вход программе поступают номера телефонов с привязкой к именам в виде строк следующего формата:
# # номер_1 имя_1
# # номер_2 имя_2
# # ...
# # номер_N имя_N
# # В программе уже реализовано считывание всех строк и сохранение их в виде списка:
# # lst_in = list(map(str.strip, sys.stdin.readlines()))
# # На основе списка lst_in необходимо создать словарь d, где ключами будут имена, а значениями - список номеров телефонов
# # для этого имени (ключа). Обратите внимание, что одному имени может принадлежать несколько разных номеров. Полученный
# # словарь вывести командой:
# # print(*sorted(d.items()))
# lst_in = ['+71234567890 Сергей',
#           '+71234567810 Сергей',
#           '+51234567890 Михаил',
#           '+72134567890 Николай']
# d = {}
# for i in lst_in:
#     i = i.split()
#     if i[1] in d:
#         d[i[1]].append(i[0])
#     else:
#         d[i[1]] = [i[0]]
# print(*sorted(d.items()))

# # интересное решение другого ученика
# import sys
#
# # считывание списка из входного потока
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# d = {}
#
# for i in lst_in:
#     value, key = i.split()
#     if key in d:
#         d[key] += [value]
#     else:
#         d[key] = [value]
#
# print(*sorted(d.items()))

# # # ______  Задание 173  ______
# # На вход программе поступают целые положительные числа. Необходимо с помощью цикла реализовать их считывание,
# # пока не встретится число 0. В теле цикла для каждого прочитанного числа вычисляется квадратный корень
# # (с точностью до сотых) и значение выводится на экран (в столбик). С помощью словаря выполните кэширование данных так,
# # чтобы при повторном вводе того же самого числа результат не вычислялся, а бралось ранее вычисленное значение (из словаря).
# # При этом на экране должно выводиться:
# # значение из кэша: <число>
# n = 1
# d = {}
# s = 0
# while n != 0:
#     n = int(input())  # 1 2 3 3 4 0
#     if n == 0:
#         break
#     if n not in d:
#         d[n] = round(n ** 0.5, 2)
#         print(d[n])
#     else:
#         print(f'значение из кэша: {d[n]}')

# # # ______  Задание 174  ______
# # Тестовый веб-сервер возвращает HTML-страницы по URL-адресам (строкам). На вход программе поступают различные URL-адреса,
# # записанные каждое с новой строки. В программе уже реализовано считывание всех строк и сохранение их в виде списка:
# # lst_in = list(map(str.strip, sys.stdin.readlines()))
# # Необходимо перебрать в цикле этот список с URL-адресами и если адрес появился (пришел) впервые, то на экране отобразить
# # строку (без кавычек):
# # "HTML-страница для адреса <URL-адрес>"
# # и сохранить в словаре эту строку с ключом текущего URL-адреса. Если же URL-адрес встречается (приходит) повторно
# # (проверяется по ключам словаря), то следует взять строку "HTML-страница для адреса <URL-адрес>" из этого словаря и
# # вывести на экран сообщение (без кавычек):
# # "Взято из кэша: HTML-страница для адреса <URL-адрес>"
# # Сообщения выводить каждое с новой строки.
# # P.S. Подобные задачи на практике решаются через хэш-таблицы. В Python словарь - это хэш-таблица. Скорость поиска ключа
# # в нем выполняется очень быстро (намного быстрее, чем в списке). Именно поэтому решать ее через список очень плохая практика.
# lst_in = ['ustanovka-i-zapusk-yazyka', 'ustanovka-i-poryadok-raboty-pycharm',
#           'peremennyye-operator-prisvaivaniya-tipy-dannykh', 'arifmeticheskiye-operatsii',
#           'ustanovka-i-poryadok-raboty-pycharm']
# d = {}
# for i in lst_in:
#     if i in d:
#         print(f'Взято из кэша: {d[i]}')
#     else:
#         my_str = f'HTML-страница для адреса {i}'
#         print(my_str)
#         d[i] = my_str

# # # ______  Задание 175  ______
# # На вход программе подается строка из русских букв и символов пробела. Необходимо ее прочитать и закодировать азбукой
# # Морзе, где каждой букве ставится в соответствие код из точки и тире. После каждой закодированной буквы должен стоять
# # пробел (символ окончания кода буквы). После последнего кода пробела быть не должно (в конце строки). Коды азбуки Морзе
# # приведены ниже для русского алфавита и символа пробела:
# # А    .-	М    --	Ш    ----
# # Б    -...	Н    -.	Щ    --.-
# # В    .--	О    ---	Ъ    --.--
# # Г    --.	П    .--.	Ы    -.--
# # Д    -..	Р    .-.	Ь    -..-
# # Е (Ё)    .	С    ...	Э    ..-..
# # Ж    ...-	Т    -	Ю    ..--
# # З    --..	У    ..-	Я    .-.-
# # И    ..	Ф    ..-.	' '    -...-
# # Й    .---	Х    ....
# # К    -.-	Ц    -.-.
# # Л    .-..	Ч    ---.
# # Результат кодирования вывести в виде строки.
# morze = {'а': '.-', 'б': '-...', 'в': '.--', 'г': '--.', 'д': '-..', 'е': '.', 'ё': '.', 'ж': '...-', 'з': '--..',
#          'и': '..', 'й': '.---', 'к': '-.-', 'л': '.-..', 'м': '--', 'н': '-.', 'о': '---', 'п': '.--.', 'р': '.-.',
#          'с': '...', 'т': '-', 'у': '..-', 'ф': '..-.', 'х': '....', 'ц': '-.-.', 'ч': '---.', 'ш': '----',
#          'щ': '--.-', 'ъ': '--.--', 'ы': '-.--', 'ь': '-..-', 'э': '..-..', 'ю': '..--', 'я': '.-.-', ' ': '-...-'}
#
# str_in = list(input().lower())
# lst = [morze.get(i) for i in str_in]
# print(*lst)  # ... . .-. --. . .--- -...- -... .- .-.. .- -.- .. .-. . .--

# # # # ______  Задание 176  ______
# # На вход программе подается закодированная строка с помощью азбуки Морзе. Коды разделены между собой пробелом.
# # Необходимо ее раскодировать, используя азбуку Морзе из предыдущего занятия. Все буквы в строке должны быть малыми
# # (нижний регистр). Полученное сообщение (строку) вывести на экран.
# morze = {'а': '.-', 'б': '-...', 'в': '.--', 'г': '--.', 'д': '-..', 'е': '.', 'ж': '...-', 'з': '--..', 'и': '..',
#          'й': '.---', 'к': '-.-', 'л': '.-..', 'м': '--', 'н': '-.', 'о': '---', 'п': '.--.', 'р': '.-.', 'с': '...',
#          'т': '-', 'у': '..-', 'ф': '..-.', 'х': '....', 'ц': '-.-.', 'ч': '---.', 'ш': '----', 'щ': '--.-',
#          'ъ': '--.--', 'ы': '-.--', 'ь': '-..-', 'э': '..-..', 'ю': '..--', 'я': '.-.-', ' ': '-...-'}
# lst = []
# str_in = input().split()
#
# for i in str_in:
#     for key, value in morze.items():
#         if i == value:
#             lst.append(key)
#
# print(*lst, sep='')

# # интересное решение другого студента
# morze = {'а': '.-', 'б': '-...', 'в': '.--', 'г': '--.', 'д': '-..', 'е': '.', 'ж': '...-', 'з': '--..', 'и': '..',
# 'й': '.---', 'к': '-.-', 'л': '.-..', 'м': '--', 'н': '-.', 'о': '---', 'п': '.--.', 'р': '.-.', 'с': '...', 'т': '-',
# 'у': '..-', 'ф': '..-.', 'х': '....', 'ц': '-.-.', 'ч': '---.', 'ш': '----', 'щ': '--.-', 'ъ': '--.--', 'ы': '-.--',
# 'ь': '-..-', 'э': '..-..', 'ю': '..--', 'я': '.-.-', ' ': '-···-'}
# back_morze = {v: k for k, v in morze.items()}
# print(*(back_morze[code] for code in input().lower().split()), sep='')

# # интересное решение другого студента
# morze = {'а': '.-', 'б': '-...', 'в': '.--', 'г': '--.', 'д': '-..', 'е': '.', 'ж': '...-', 'з': '--..',
# 'и': '..', 'й': '.---', 'к': '-.-', 'л': '.-..', 'м': '--', 'н': '-.', 'о': '---', 'п': '.--.', 'р': '.-.',
# 'с': '...', 'т': '-', 'у': '..-', 'ф': '..-.', 'х': '....', 'ц': '-.-.', 'ч': '---.', 'ш': '----', 'щ': '--.-',
# ъ': '--.--', 'ы': '-.--', 'ь': '-..-', 'э': '..-..', 'ю': '..--', 'я': '.-.-', ' ': '-...-'}
# s = input().split()
# res = [print(k, end='') for i in s for k,v in morze.items() if i==v]

# # # ______  Задание 177  ______
# # а вход программе подается список целых чисел, записанных в одну строчку через пробел. Необходимо их прочитать и
# # сохранить в виде списка. Затем, с помощью словаря выделите только уникальные (не повторяющиеся) числа. Сформируйте
# # из них еще один список (уникальных чисел). Числа в этом списке должны идти в том же порядке, что и при чтении
# # (из входного потока). Выведите уникальные числа на экран в одну строчку через пробел.
# # P. S. Такая задача, обычно решается через множества, но мы их еще не проходили, поэтому воспользуемся словарем.
# lst_in = [[int(i), 0 ]for i in input().split()]  # 8 11 -4 5 2 11 4 8
# d = dict(lst_in)
# print(*d.keys())  # 8 11 -4 5 2 4

# # интересное решение другого студента
# print(*dict.fromkeys(input().split()))
# # интересное решение другого студента
# print(*{i: None for i in input().split()})

# # ______  Задание 178  ______
# # На вход программе подаются строки в формате:
# # <день рождения 1> имя_1
# # <день рождения 2> имя_2
# # ...
# # <день рождения N> имя_N
# # Дни рождений и имена могут повторяться.
# # В программе уже реализовано их считывание и сохранение в списке:
# # lst_in = list(map(str.strip, sys.stdin.readlines()))
# # На основе списка lst_in сформировать словарь, где ключи - дни рождения (целое число), а значения - имена (строка).
# # Выведите полученный словарь в формате (см. пример ниже):
# # день рождения 1: имя1, ..., имяN1
# # день рождения 2: имя1, ..., имяN2
# # ...
# # день рождения M: имя1, ..., имяNM
# import sys
#
# # считывание списка из входного потока
# lst_in = list(map(str.strip, sys.stdin.readlines()))
#
# # здесь продолжайте программу (используйте список lst_in)
# d = {}
# lst_2 = [i.split() for i in lst_in]
# for i in range(len(lst_2)):
#     if lst_2[i][0] in d:
#         d[lst_2[i][0]] = f'{d[lst_2[i][0]]}, {lst_2[i][1]}'
#     else:
#         d[lst_2[i][0]] = lst_2[i][1]
#
# for key, value in d.items():
#     print(f'{key}: {value}')

# # ______  Задание 179  ______
# # Объявите в программе словарь с наименованиями предметов и их весом (в граммах):
# # things = {'карандаш': 20, 'зеркальце': 100, 'зонт': 500, 'рубашка': 300,
# #           'брюки': 1000, 'бумага': 200, 'молоток': 600, 'пила': 400, 'удочка': 1200,
# #           'расческа': 40, 'котелок': 820, 'палатка': 5240, 'брезент': 2130, 'спички': 10}
# # Сергей собирается в поход и готов взвалить на свои хрупкие плечи максимальный вес в N кг (вводится с клавиатуры).
# # Он решил класть в рюкзак предметы в порядке убывания их веса (сначала самые тяжелые, затем, все более легкие) так,
# # чтобы их суммарный вес не превысил значения N кг. Все предметы даны в единственном экземпляре. Выведите список
# # предметов (в строчку через пробел), которые берет с собой Сергей в порядке убывания их веса.
# things = {'карандаш': 20, 'зеркальце': 100, 'зонт': 500, 'рубашка': 300,
#           'брюки': 1000, 'бумага': 200, 'молоток': 600, 'пила': 400, 'удочка': 1200,
#           'расческа': 40, 'котелок': 820, 'палатка': 5240, 'брезент': 2130, 'спички': 10}
# n = 1000 * int(input())
# things_weight = sorted(things.values(), reverse=True)
# d = {v: k for k, v in things.items()}
# lst = []
# for i in things_weight:
#     if i <= n:
#         n -= i
#         lst.append(d[i])
# print(*lst)

# # ______  Задание 180  ______
# # Объявите в программе следующий кортеж:
# # t = (3.4, -56.7)
# # На вход программе подается последовательность целых чисел, записанных через пробел. Необходимо их прочитать и добавить
# # в конец кортежа t. Добавленные числа в кортеже должны следовать в порядке их считывания. Результат вывести на экран командой:
# # print(t)
# t = (3.4, -56.7)  # 8 11 -5 2
# numbers = list(map(int, input().split()))
# t += tuple(numbers)
# print(t)  # (3.4, -56.7, 8, 11, -5, 2)

# # ______  Задание 181  ______
# # На вход программе подается строка с названиями городов, записанных через пробел. Необходимо прочитать эту строку и на
# # ее основе сформировать кортеж из названий городов. Названия в кортеже должны идти в том же порядке, что и в исходной строке.
# # Выполните проверку: если в полученном кортеже нет города "Москва", то следует его добавить в конец кортежа. Выведите
# # на экран названия городов из кортежа (по порядку) в одну строчку через пробел.
# t = tuple(input().split())  # Уфа Казань Самара
# if 'Москва' not in t:
#     t += ('Москва',)
# print(*t)  # Уфа Казань Самара Москва

# # ______  Задание 182  ______
# # На вход программе подается строка с названиями городов, записанных через пробел. Необходимо прочитать эту строку и
# # на ее основе сформировать кортеж из названий городов. Затем, выполните проверку: если в полученном кортеже присутствует
# # город "Ульяновск", то этот элемент следует удалить (создав новый кортеж). Выведите на экран названия городов из итогового
# # кортежа (по порядку) в одну строчку через пробел.
# cities = tuple(input().split())  # Воронеж Самара Тольятти Ульяновск Пермь
# if 'Ульяновск' in cities:
#     i = cities.index('Ульяновск')
#     cities = cities[:i] + cities[i + 1:]
# print(*cities)  # Воронеж Самара Тольятти Пермь

# # ______  Задание 183  ______
# #  На вход программе подается строка с именами студентов, записанных через пробел. Необходимо прочитать эту строку и на
# #  ее основе сформировать кортеж из имен. Затем, отобразите на экране все имена малыми буквами из этого кортежа (по порядку),
# #  которые содержат фрагмент "ва" (без учета регистра). Имена выводятся в одну строчку через пробел в нижнем регистре
# #  (малыми буквами).
# names = tuple(input().split())  # Петя Варвара Венера Василиса Василий Федор
# name = tuple()
# for i in names:
#     i = i.lower()
#     if 'ва' in i:
#         name += (i,)
# if name == ():
#     print(*names)
# print(*name) # варвара василиса василий

# # ______  Задание 184  ______
# #  На вход программе подаются целые числа, записанные в одну строку через пробел. Необходимо их прочитать и сохранить
# #  в кортеже. Затем, создать еще один кортеж с уникальными (не повторяющимися) значениями из первого кортежа. Уникальные
# #  числа должны следовать в том же порядке, что и в исходном кортеже. Отобразите найденные уникальные числа в одну
# #  строчку через пробел.
# # P. S. Подобные задачи решаются, как правило, с помощью множеств, но в качестве практики пока обойдемся без них.
# numbers = tuple(map(int, input().split()))  # 8 11 -5 -2 8 11 -5
# new_numbers = ()
# for i in numbers:
#     if i not in new_numbers:
#         new_numbers += (i,)
#
# print(*new_numbers) # 8 11 -5 -2

# # ______  Задание 185  ______
# # На вход программе подаются целые числа, записанные в одну строку через пробел. Необходимо их прочитать и сохранить в
# # кортеже. Затем, в кортеже найти и вывести в одну строчку через пробел (по порядку) все индексы неуникальных
# # (повторяющихся) значений.
# numbers = tuple(map(int, input().split()))  # 5 4 -3 2 4 5 10 11
# index_tuple = ()
# ind = ()
#
# for i, v in enumerate(numbers):
#     if v in index_tuple:
#         if numbers.index(v) not in ind:
#             ind += (numbers.index(v), i)
#         else:
#             ind += (i,)
#     index_tuple += (v,)
# lst = sorted(ind)
# print(*lst)  # 0 1 4 5

# # ______  Задание 186  ______
# # Объявите в программе следующий двумерный кортеж, размером 5 x 5 элементов:
# # t = ((1, 0, 0, 0, 0),
# #      (0, 1, 0, 0, 0),
# #      (0, 0, 1, 0, 0),
# #      (0, 0, 0, 1, 0),
# #      (0, 0, 0, 0, 1))
# # На вход программе подается натуральное число N (N < 5). Необходимо на основе кортежа t сформировать новый аналогичный
# # кортеж t2 размером N x N элементов путем отбрасывания последних строк и столбцов. Результат выведите на экран в виде
# # таблицы чисел.
# # P.S. Обратите внимание, что в при выводе таблицы в конце строк не должно быть пробелов.
# t = ((1, 0, 0, 0, 0),
#      (0, 1, 0, 0, 0),
#      (0, 0, 1, 0, 0),
#      (0, 0, 0, 1, 0),
#      (0, 0, 0, 0, 1))
# t2 = ()
# count = 0
# N = int(input()) # 3
# for i in t:
#     if count < N:
#         t2 += (i[:N],)
#     count += 1
# for i in t2:
#     print(*i)
# # 1 0 0
# # 0 1 0
# # 0 0 1

# # ______  Задание 187  ______
# # На вход программе подаются строки (пункты меню), каждая с новой строки, в формате:
# #
# # название_1 URL-адрес_1
# # название_2 URL-адрес_2
# # ...
# # название_N URL-адрес_N
# # В программе уже реализовано чтение этих строк и сохранение их в списке:
# # lst_in = list(map(str.strip, sys.stdin.readlines()))
# # Необходимо преобразовать список lst_in так, чтобы получился кортеж menu следующего вида:
# # ((название_1, URL-адрес_1), (название_2, URL-адрес_2), ... (название_N, URL-адрес_N))
# # Полученный кортеж вывести на экран командой:
# # print(menu)
# # Главная home
# # Python learn-python
# # Java learn-java
# # PHP learn-php
# import sys
# # считывание списка из входного потока
# lst_in = list(map(str.strip, sys.stdin.readlines()))
# # здесь продолжайте программу (используйте список lst_in)
# menu = tuple([tuple(lst_in[i].split()) for i in range(len(lst_in))])
# print(menu)  # (('Главная', 'home'), ('Python', 'learn-python'), ('Java', 'learn-java'), ('PHP', 'learn-php'))

# # ______  Задание 188  ______
# #  На вход программе подаются вещественные числа, записанные в одну строчку через пробел. Необходимо их прочитать
# #  и сохранить в множестве s.
# # Подсказка: множество можно создать по аналогии со списком:
# # list(map(float, <список из строк чисел>))
# # Выведите на экран значения множества s в порядке возрастания в одну строчку через пробел с помощью команды:
# # print(*sorted(s))
# # P. S. О функции sorted мы еще будем говорить, а также об операторе *. Пока просто запомните такую возможность
# # сортировки и вывода произвольных коллекций на экран.
# s = set(map(float, input().split()))  # -5.1 -3.0 7.6 10.3 -4.6 2.78
# print(*sorted(s))  # -5.1 -4.6 -3.0 2.78 7.6 10.3

# # ______  Задание 189  ______
# # На вход программе подается строка со словами, разделенные пробелом. Необходимо прочитать эту строку, разбить на слова
# # и с помощью множества подсчитать число уникальных слов (без учета регистра). Результат (число уникальных слов) вывести
# # на экран.
# str = set([i.lower() for i in input().split()])  # Мама мыла раму а потом мыла кота и еще мыла пол
# print(len(str))  # 9

# # ______  Задание 190  ______
# # На вход программе подается строка, содержащая латинские символы, пробелы и цифры. Необходимо прочитать эту строку и
# # выделить из нее все неповторяющиеся цифры (символы от 0 до 9). Выведите на экран все найденные уникальные цифры в одну
# # строчку через пробел в порядке возрастания их значений. Если цифры отсутствуют, то вывести строку "НЕТ".
# str = input().split() # Python 3.9.11 - best language!
# s = set()
# for i in str:
#     for j in i:
#         if j.isdigit():
#             s.add(j)
# if s:
#     print(*sorted(s)) # 1 3 9
# else:
#     print('НЕТ')

# # ______  Задание 191  ______
# # В ночном клубе фиксируется список гостей. Причем гости могут выходить из помещения, а затем, снова заходить.
# # Тогда их имена фиксируются повторно. На вход программы поступает такой список (каждое имя записано с новой строки).
# # В программе уже реализовано считывание этих строк и сохранение в списке:
# # lst_in = list(map(str.strip, sys.stdin.readlines()))
# # Требуется подсчитать по списку lst_in общее число гостей, которые посетили ночной клуб. Полагается, что гости имеют
# # уникальные имена. На экран вывести общее число гостей клуба.
# lst_in = ['Мария', 'Елена', 'Екатерина', 'Александр', 'Елена', 'Мария']
# print(len(set(lst_in)))  # 4

# # ______  Задание 192  ______
# # В аккаунте YouTube Сергея прокомментировали очередное видео. Некоторые посетители оставляли несколько комментариев.
# # Требуется по списку комментариев определить уникальное число комментаторов (полагается, что имена у разных комментаторов
# # не совпадают). Комментарии поступают на вход программе в формате:
# # имя 1: комментарий 1
# # имя 2: комментарий 2
# # ...
# # имя N: комментарий N
# # В программе уже реализовано считывание этих строк и сохранение в списке:
# # lst_in = list(map(str.strip, sys.stdin.readlines()))
# # Выведите на экран общее число уникальных комментаторов.
# lst_in = ['EvgeniyK: спасибо большое!', 'LinaTroshka: лайк и подписка!', 'Sergey Karandeev: крутое видео!',
#           'Евгений Соснин: обожаю', 'EvgeniyK: это повтор?', 'Sergey Karandeev: нет, это новое видео']
# names = set()
# for i in lst_in:
#     lst = i.split(':')
#     names.add(lst[0])
# print(len(names))

# # ______  Задание 193  ______
# # На вход программе подаются названия городов, каждое с новой строки. Необходимо в цикле читать эти названия, пока
# # не встретится строка "q". С помощью множества определить общее уникальное число городов, которые читались в программе
# # (за исключением "q"). На экран вывести это число.
# # P.S. Из коллекций при реализации программы использовать только множества.
# # Уфа
# # Москва
# # Тверь
# # Екатеринбург
# # Томск
# # Уфа
# # Москва
# # q
# i = ''
# s = set()
# while i != 'q':
#     i = input()
#     if i == 'q':
#         break
#     s.add(i)
#
# print(len(s))

# # ______  Задание 194  ______
# # На вход программе подаются два списка целых чисел, каждый с новой строки (в строке наборы чисел следующих через пробел).
# # Необходимо прочитать эти наборы чисел и сохранить их в отдельных списках (или кортежах). Затем, с помощью множеств(а)
# # выбрать только уникальные числа, присутствующие и в первом и во втором списках одновременно. Результат выведите на
# # экран в виде строки чисел, записанных по возрастанию через пробел, используя команду (здесь s - это множество,
# # содержащее уникальные числа):
# # print(*sorted(s))
# # P. S. О функции sorted мы еще будем говорить, а также об операторе *. Пока просто запомните такую возможность сортировки
# # и вывода произвольных коллекций на экран.
# setA = set(input().split())  # 8 11 12 15 -2
# setB = set(input().split())  # 4 11 10 15 -5 1 -2
# s = setA & setB
# print(*sorted(s))  # -2 11 15

# # ______  Задание 195  ______
# #  На вход программе подаются два списка целых чисел, каждый с новой строки (в строке наборы чисел следующих через
# #  пробел). Необходимо прочитать эти наборы чисел и сохранить их в отдельных списках (или кортежах). Затем, с помощью
# #  множеств(а) выбрать уникальные числа, присутствующие в первом списке, но отсутствующие во втором. Результат выведите
# #  на экран в виде строки чисел, записанных по возрастанию через пробел, используя команду (здесь s - это множество,
# #  содержащее уникальные числа):
# # print(*sorted(s))
# setA = set(map(int, input().split()))  # 8 5 3 5 -3 1
# setB = set(map(int, input().split()))  # 1 2 3 4
# s = setA - setB
# print(*sorted(s))  # -3 5 8

# # ______  Задание 196  ______
# #  На вход программе подаются два списка целых чисел, каждый с новой строки (в строке наборы чисел следующих через пробел).
# #  Необходимо прочитать эти наборы чисел и сохранить их в отдельных списках (или кортежах). Затем, с помощью множеств(а)
# #  выбрать уникальные числа, присутствующие в первом или втором списках, но отсутствующие одновременно в обоих. Результат
# #  выведите на экран в виде строки чисел, записанных по возрастанию через пробел, используя команду (здесь s - это множество,
# #  содержащее уникальные числа):
# # print(*sorted(s))
# lstA = list(map(int, input().split()))  # 1 2 3 4 5
# lstB = list(map(int, input().split()))  # 4 5 6 7 8
# s = set(lstA) ^ set(lstB)
# print(*sorted(s))  # 1 2 3 6 7 8

# # ______  Задание 197  ______
# # На вход программе подаются две строки со списком городов, каждый с новой строки (в строках названия городов следуют
# # через пробел). Необходимо прочитать эти строки и сохранить их в отдельных списках (или кортежах). Затем, с помощью
# # множеств(а) сравнить их между собой на равенство по уникальным (не повторяющимся) городам. Если списки содержат одни
# # и те же уникальные города (не важно в каком порядке), то вывести на экран "ДА", иначе "НЕТ".
# cities1 = input().split()  # Москва Тверь Уфа Казань Уфа Москва
# cities2 = input().split()  # Уфа Тверь Москва Казань
# s = set(cities1) == set(cities2)
# if s:
#     print('ДА')
# else:
#     print('НЕТ')

# # ______  Задание 198  ______
# # На вход программе подаются оценки студента (его ответов у доски по предмету "Информатика") в виде чисел от 2 до 5,
# # записанных в одну строчку через пробел. Необходимо прочитать эти числа. Затем, проверить, если студент имеет хотя бы
# # одну двойку, то он не допускается до экзамена. Вывести на экран слово "ДОПУЩЕН", если студент не имеет ни одной двойки,
# # иначе вывести "НЕ ДОПУЩЕН". При реализации задачи используйте множество для определения наличия двойки.
# setA = set(map(int, input().split()))  # 3 4 4 5 2 3
# if 2 in setA:
#     print('НЕ ДОПУЩЕН')
# else:
#     print('ДОПУЩЕН')

# # ______  Задание 199  ______
# # На вход программе подаются две строки со списком городов, которые объехал Сергей в 1-й и 2-й годы своего путешествия
# # по России. Необходимо прочитать эти наборы строк и сохранить их в отдельных списках (или кортежах). Затем, требуется
# # определить, включал ли его маршрут во 2-й год все города 1-го года путешествия? Если это так, то вывести "ДА",
# # иначе "НЕТ".
# cities1 = input().split()  # Москва Казань Самара Москва
# cities2 = input().split()  # Москва Владимир Новгород Казань Самара Москва
# if set(cities2) >= set(cities1):
#     print('ДА')
# else:
#     print('НЕТ')
# # ДА

# # ______  Задание 200  ______
# # На вход программе подается натуральное число, которое может содержать только простые множители 1, 2, 3, 5 и 7 (любые
# # из них, не обязательно все). Необходимо прочитать это число и разложить его на простые множители. Затем, проверить,
# # содержит ли оно множители 2, 3 и 5 (обязательно все их, хотя бы один раз). Если это так, то вывести "ДА", иначе "НЕТ".
# n = int(input())  # 210
# multy_numbers = [1, 2, 3, 5, 7]
# lst = []
# for i in multy_numbers:
#     if n % i == 0:
#         lst.append(i)
# if set(lst) > set([2, 3, 5]):
#     print('ДА')
# else:
#     print('НЕТ')
# # ДА

# # ______  Задание 201  ______
# # На вход программе подается строка со списком оценок, например:
# # 2 неудовлетворительно удовлетворительно хорошо отлично
# # Первая цифра - это числовое значение первой оценки. Остальные оценки имеют возрастающие числа на 1.
# # Необходимо прочитать эту строку и с помощью генератора словарей сформировать словарь d, в котором ключами будут
# # выступать числа, а значениями - слова.
# # Например:
# # d = {2: 'неудовлетворительно', 3: 'удовлетворительно', 4: 'хорошо', 5: 'отлично'}
# # Вывести на экран значение сформированного словаря с ключом 4 (полагается, что такой ключ всегда существует).
# lst_in = input().split()
#
# d = {int(lst_in[0]) + i : lst_in[i + 1] for i in range(len(lst_in) - 1)}
# print(d[4])

# # ______  Задание 202  ______
# # На автомойку в течение квартала заезжали машины. Их гос. номера фиксировались в журнале, следующим образом (пример):
# # Е220СК
# # А120МВ
# # В101АА
# # Е220СК
# # А120МВ
# # В программе уже реализовано чтение этих строк и сохранение в списке:
# # lst_in = list(map(str.strip, sys.stdin.readlines()))
# # На основе этого списка через генератор множеств сформировать еще один список уникальных машин. На экран вывести
# # число уникальных машин.
# import sys
#
# # считывание списка из входного потока
# lst_in = list(map(str.strip, sys.stdin.readlines()))
#
# # здесь продолжайте программу (используйте список lst_in)
# d = {i for i in lst_in}
# print(len(d))

# # ______  Задание 203  ______
# # На вход программе подается строка со словами, записанными через пробел. Необходимо прочитать эту строку и с помощью
# # генератора множеств сформировать множество из уникальных слов без учета регистра и длина которых не менее трех символов.
# # Вывести на экран размер этого множества.
# set_in = {i.lower() for i in input().split() if len(i) >= 3}
# print(len(set_in))

# # ______  Задание 204  ______
# # На вход программе подается строка со словами, записанными через пробел. Необходимо прочитать эту строку и с помощью
# # генераторов множеств и словарей сформировать словарь в формате:
# # {слово_1: количество_1, слово_2: количество_2, ..., слово_N: количество_N}
# # То есть, ключами выступают уникальные слова (без учета регистра), а значениями - число их встречаемости в тексте.
# # На экран вывести значение словаря для слова (союза) 'и'. Если такого ключа нет, то вывести 0.
# lst_in = [i.lower() for i in input().split()]
# d = {i: lst_in.count(i) for i in lst_in}
#
# if 'и' in d:
#     print(d['и'])
# else:
#     print(0)

# # ______  Задание 205  ______
# # На вход программе подаются строки с информацией по книгам некоторого книжного магазина в формате:
# # <автор 1>: <название 1>
# # ...
# # <автор N>: <название N>
# # Авторы с названиями могут повторяться. Также в программе уже реализовано чтение этих строк и сохранение в списке:
# # lst_in = list(map(str.strip, sys.stdin.readlines()))
# # Необходимо, используя генераторы, сформировать словарь с именем d вида:
# # {'автор 1': {'название 1', 'название 2', ..., 'название M'}, ..., 'автор K': {'название 1', 'название 2', ..., 'название S'}}
# # То есть, ключами выступают уникальные авторы, а значениями - множества с уникальными названиями книг соответствующего автора.
# # На экран ничего выводить не нужно, только сформировать словарь обязательно с именем d - он, далее будет проверяться в тестах!
# lst_in = ['Пушкин: Сказка о рыбаке и рыбке', 'Есенин: Письмо к женщине', 'Тургенев: Муму', 'Пушкин: Евгений Онегин', 'Есенин: Русь']
# d = {}
# s = set()
# lst1 = [i.split(': ') for i in lst_in]
# for i in lst1:
#
#     if i[0] not in d:
#         d[i[0]] = {i[1]}
#     else:
#         d[i[0]] |= {i[1]}

# # ______  Задание 206  ______
# # Объявите в программе функцию, которая не имеет параметров и просто выводит на экран следующую строку:
# # It's my first function
# # После объявления вызовите эту функцию.
# def show():
#     print("It's my first function")
#
#
# show()

# # ______  Задание 207  ______
# # Объявите в программе функцию без параметров, которая читает из входного потока (с клавиатуры) имя и фамилию,
# # записанные в одну строку через пробел, и выводит на экран сообщение (без кавычек):
# # "Уважаемый, <имя> <фамилия>! Вы верно выполнили это задание!"
# # После объявления вызовите эту функцию.
# name, surname = input().split()
# def show(name, surname):
#     print(f"Уважаемый, {name} {surname}! Вы верно выполнили это задание!")
#
#
# show(name, surname)

# # ______  Задание 208  ______
# # Объявите в программе функцию, которая имеет один параметр - вес предмета, и выводит на экран сообщение (без кавычек):
# # "Предмет имеет вес: x кг."
# # где x - переданное значение (аргумент) функции. После объявления функции прочитайте (с помощью функции input)
# # вещественное число и вызовите функцию с этим числовым значением.
# def show(weight):
#     print(f"Предмет имеет вес: {weight} кг.")
#
#
# number = float(input())
# show(number)

# # ______  Задание 209  ______
# # Объявите в программе функцию, которая в качестве параметра принимает список (list), находит максимальное,
# # минимальное и сумму значений этого списка и выводит результат на экран в виде строки (без кавычек):
# # "Min = v_min, max = v_max, sum = v_sum"
# # где v_min, v_max, v_sum - вычисленные значения минимального, максимального и суммы значений списка.
# # После объявления функции прочитайте (с помощью функции input) список целых чисел, записанных в одну строку через
# # пробел, и вызовите функцию с передачей ей этого списка.
# def calculated(lst):
#     v_min = min(lst)
#     v_max = max(lst)
#     v_sum = sum(lst)
#
#     print(f"Min = {v_min}, max = {v_max}, sum = {v_sum}")
#
#
# lst = list(map(int, input().split()))
# calculated(lst)

# # ______  Задание 210  ______
# # Объявите в программе функцию с двумя параметрами width и height (ширина и высота прямоугольника), которая выводит
# # сообщение (без кавычек):
# # "Периметр прямоугольника, равен x"
# # где x - вычисленный периметр прямоугольника. После объявления функции прочитайте (с помощью функции input) два целых
# # числа, записанных в одну строку через пробел, и вызовите функцию с этими числовыми значениями.
# def calculate(width, height):
#     x = 2 * (width + height)
#     print(f"Периметр прямоугольника, равен {x}")
#
#
# n1, n2 = map(int, input().split())
#
# calculate(n1, n2)

# # ______  Задание 211  ______
# # бъявите в программе функцию с одним параметром, которая проверяет корректность переданного ей email-адреса в виде
# # строки. Полагается, что адрес верен, если он обязательно содержит символы '@' и '.', а все остальные символы могут
# # принимать значения: 'a-z', 'A-Z', '0-9' и '_'. Если email верен, то функция выводит "ДА", иначе "НЕТ".
# # После объявления функции прочитайте (с помощью функции input) строку с email-адресом и вызовите функцию с этим аргументом.
# def check(mail):
#     if '@' in mail and '.' in mail:
#         for i in mail:
#             if i.lower() in simbols or i in ['_', '@', '.'] or i.isdigit():
#                 counter.append('+')
#             else:
#                 counter.append('-')
#
#     else:
#         counter.append('-')
#
#     if '-' in counter:
#         print('НЕТ')
#     else:
#         print('ДА')
#
#
# simbols = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
#            'w', 'x', 'y', 'z']
# counter = []
# mail = input()
# check(mail)

# # решение другого ученика
# def check_mail(mail):
#     allow = set("abcdefghijklmnopqrstuvwxyz0123456789_@.")
#     nesessary = {"@", "."}
#     print("ДА") if nesessary <= mail <= allow else print("НЕТ")
#
#
# msg = set(input().lower())
# check_mail(msg)

# # # решение другого ученика
# def check_email(email):
#     print(
#         'ДА' if '@' in email and
#         '.' in email and
#         sum([0 if i == '@' or i == '.' or 'a' <= i <= 'z' or 'A' <= i <= 'Z' or '0' <= i <= '9' or i == '_' else 1 for i in email]) == 0
#         else 'НЕТ'
#     )
#
#
# check_email(input())

# # ______  Задание 212  ______
# # Объявите в программе функцию с именем get_sq, которая имеет один параметр (принимает вещественное число). В теле
# # функции значение параметра возводится в квадрат и возвращается функцией.
# # После объявления функции прочитайте (с помощью функции input) вещественное число из входного потока и вызовите функцию
# # с прочитанным значением. Выведите на экран число, которое возвратила функция.
# def get_sq(x):
#     return x ** 2
#
#
# n = float(input())
# print(get_sq(n))

# # ______  Задание 213  ______
# # Объявите функцию с именем is_triangle, которая принимает три стороны треугольника (целые числа) и проверяет, можно ли
# # из переданных аргументов составить треугольник. (Напомню, что у любого треугольника длина любой его стороны должна
# # быть меньше суммы двух других). Если  проверка проходит, функция должна возвращать булево значение True, а иначе False.
# # Вызывать функцию не нужно, только объявить.
# def is_triangle(a, b, c):
#     return a < (b + c) and b < (a + c) and c < (a + b)

# # ______  Задание 214  ______
# #  Объявите функцию с именем is_large, которая принимает строку (в качестве параметра) и возвращает булево значение
# # False, если длина строки меньше трех символов, иначе True.
# # Вызывать функцию не нужно, только объявить.
# def is_large(my_str):
#     return False if len(my_str) < 3 else True

# # ______  Задание 215  ______
# # Объявите в программе функцию с одним параметром для проверки переданного числа на четность. Функция должна возвращать
# # булево значение True, если переданное число четное и False, в противном случае.
# # После объявления функции в цикле на каждой итерации необходимо читать целочисленное числовое значение командой:
# # x = int(input())
# # Цикл должен работать пока x не равен 1. Если прочитанное значение x четное (проверяется с помощью ранее объявленной
# # функции), то число выводится на экран (каждое с новой строки).
# def num(x):
#     return x % 2 == 0
#
#
# x = 0
# while x != 1:
#     x = int(input())
#     if num(x):
#         print(x)

# # ______  Задание 216  ______
# # Объявите в программе функцию с одним параметром для проверки переданного числа на нечетность. Функция должна возвращать
# # булево значение True, если переданное число нечетное, и False в противном случае.
# # После объявления функции далее в программе прочитайте последовательность целых чисел, подаваемых на вход программе,
# # с помощью команды:
# # lst_d = list(map(int, input().split()))
# # Затем, используя генератор списков и объявленную ранее функцию, сформируйте список lst из нечетных значений на основе
# # списка lst_d. Результат отобразите на экране командой:
# # print(*lst)
# def num(x):
#     return x % 2 != 0
#
#
# lst_d = list(map(int, input().split()))
# lst = [x for x in lst_d if num(x)]
#
# print(*lst)

# # ______  Задание 217  ______
# # На вход программе подается строка (слово), которое читается в переменную tp с помощью команды:
# # tp = input().strip()
# # Если переменная tp равна строке "RECT", то следует объявить функцию с именем get_sq с двумя параметрами (длина и ширина
# # прямоугольника), вычисляющую площадь прямоугольника по переданным аргументам и возвращающую вычисленное значение.
# # (Функция на экран ничего выводить не должна).
# # Если переменная tp не равна строке "RECT", то следует объявить функцию с тем же именем get_sq, но с одним параметром
# # (длина стороны квадрата) для вычисления площади квадрата (формула: a*a). Вычисленное значение возвращается функцией.
# # (Функция на экран ничего выводить не должна).
# # Примечание: в программе должна быть задана только одна функция с именем get_sq в зависимости от введенного слова
# # (значения переменной tp). Вызывать функцию не нужно, только объявить.
# tp = input().strip()
# if tp == 'RECT':
#     def get_sq(length, width):
#         return length * width
# else:
#     def get_sq(width):
#         return width * width

# # ______  Задание 218  ______
# # Объявите в программе функцию, которая имеет один параметр, принимающий строку. Функция должна возвращать булево значение
# # False, если длина переданной строки меньше 6 символов, иначе возвращать булево значение True.
# # После объявления функции далее в программе прочитайте из входного потока строку с названиями городов, записанных через
# # пробел. Сформируйте на основе прочитанной строки список cities из названий городов. Затем, используя генератор списка
# # и ранее объявленную функцию, сформируйте новый список lst из названий городов с длинами не менее шести символов
# # (города выбираются из списка cities). Результат отобразите на экране командой:
# # print(*lst)
# def len_str(my_str):
#     return False if len(my_str) < 6 else True
#
#
# cities = input().split()
# lst = [city for city in cities if len_str(city)]
# print(*lst)

# # ______  Задание 219  ______
# #  Объявите функцию, которая имеет один параметр, принимающий строку. Функция должна возвращать два значения в виде кортежа:
# #  переданную строку и ее длину.
# # После объявления функции далее в программе прочитайте из входного потока строку с названиями городов, записанных через
# # пробел. Сформируйте на основе прочитанной строки список cities из названий городов. Затем, используя генератор словарей
# # и ранее объявленную функцию, сформируйте на основе списка cities словарь d в формате:
# # d = {<город 1>: <число символов>, ..., <город N>: <число символов>}
# # Выведите этот словарь в порядке возрастания длин строк с помощью команд:
# # a = sorted(d, key=d.get)
# # print(*a)
# def len_str(my_str):
#     return my_str, len(my_str)
#
# cities = input().split()
# d = dict(len_str(city) for city in cities)
# a = sorted(d, key=d.get)
# print(*a)

# # ______  Задание 220  ______
# #  На вход программе подаются целые числа, записанные в одну строчку через пробел. Необходимо их прочитать и сохранить
# #  в списке digs. Затем (или в самом начале программы), объявить функцию, которая имеет два параметра (будут передаваться
# #  максимальное и минимальное значения из сформированного списка digs) и возвращающую произведение двух переданных аргументов.
# # Вызовите эту функцию с передачей ей в качестве аргументов минимального и максимального числового значения из списка digs.
# # Отобразите на экране значение, возвращенное функцией.
# # Подсказка: для передачи аргументов функции используйте стандартные функции max и min языка Python.
# def min_max(n_min, n_max):
#     return n_min * n_max
#
#
# digs = list(map(int, input().split()))
# print(min_max(min(digs), max(digs)))

# # ______  Задание 221  ______
# # Повторите быстрый алгоритм Евклида для нахождения наибольшего общего делителя двух натуральных чисел a и b. В программе
# # необходимо объявить функцию get_nod с двумя параметрами a и b (натуральные числа) и возвращающую значение НОД(a, b).
# # P. S. Вызывать функцию не нужно, только задать. Постарайтесь реализовать алгоритм, не возвращаясь к материалу на видео.
# def get_nod(a, b):
#     if a < b:
#         a, b = b, a
#
#     while b != 0:
#         a, b = b, a % b
#
#     return a

# # ______  Задание 222  ______
# # Объявите в программе функцию с именем get_rect_value, которая первыми двумя параметрами принимает длину и ширину
# # прямоугольника (числа), а третий формальный параметр tp имеет начальное значение 0. Если параметр tp равен нулю,
# # то функция должна возвращать периметр прямоугольника, вычисленного на основе первых двух переданных аргументов, а иначе его площадь.
# # P. S. Вызывать функцию не нужно, только объявить.
# def get_rect_value(a, b, tp=0):
#     if tp == 0:
#         return 2 * (a + b)
#     else:
#         return a * b

# # ______  Задание 223  ______
# # Объявите в программе функцию с именем check_password, которая первым параметром принимает строку (пароль) и имеет
# # второй формальный параметр chars с начальным значением в виде строки "$%!?@#". Функция должна проверять, есть ли в
# # пароле хотя бы один символ из chars и что длина пароля не менее 8 символов. Если проверка проходит, то функция
# # возвращает булево True, иначе False.
# # P. S. Вызывать функцию не нужно, только объявить.
# def check_password(psw, chars='$%!?@#'):
#     if len(psw) >= 8 and set(psw) & set(chars):
#         return True
#     else:
#         return False

# # ______  Задание 224  ______
# # Объявите в программе функцию, которая первым параметром принимает строку (с кириллицей и латиницей) и преобразовывает
# # в ней кириллические символы в латиницу, используя следующий словарь для замены русских букв на соответствующее латинское
# # написание:
# # t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh',
# #      'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',
# #      'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh',
# #      'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}
# # Функция должна возвращать результат преобразования переданной строки в латиницу. Замены делать без учета регистра
# # (исходную строку вначале следует перевести в нижний регистр - малые буквы).
# # Второй формальный параметр функции с именем sep и начальным значением в виде строки "-". Он определяет символ для
# # замены пробелов в строке.
# # На вход программе подается строка, которую необходимо прочитать (после объявления функции). Затем, дважды вызовите
# # функцию (с выводом результата ее работы на экран):
# # первый раз только с прочитанной строкой;
# # второй раз с прочитанной строкой и именованным аргументом sep со значением '+'.
# t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh',
#      'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',
#      'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh',
#      'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}
# def repl(my_str, sep='-'):
#     my_str = my_str.lower()
#     t[' '] = sep
#     lst = [t[i] if i in t else i for i in my_str]
#     lst = ''.join(lst)
#     return lst
#
# str_in = input()
# print(repl(str_in))
# print(repl(str_in, sep='+'))

# # решение другого ученика
# t = {'ё': 'yo', 'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh',
#      'з': 'z', 'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',
#     'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'c', 'ч': 'ch', 'ш': 'sh',
#     'щ': 'shch', 'ъ': '', 'ы': 'y', 'ь': '', 'э': 'e', 'ю': 'yu', 'я': 'ya'}
#
#
# def transliterate(text, sep='-'):
#     return ''.join(t.get(i, i) for i in text.lower()).replace(' ', sep)
#
#
# s = input()
# print(transliterate(s))
# print(transliterate(s, sep='+'))

# # ______  Задание 225  ______
# #  Объявите в программе функцию, которая первым параметром принимает строку, а второй формальный параметр tag  с начальным
# #  значением в виде строки "h1" определяет тег, в который должна заключаться первая переданная строка. Например, мы передаем
# #  строку "Hello Python" и заключаем в тег "h1". Функция должна вернуть строку (без кавычек):
# # "<h1>Hello Python</h1>"
# # То есть, сначала открывается тег <h1>, а в конце строки - закрывается </h1>. И так для любых указанных тегов.
# # После объявления функции далее в программе прочитайте из входного потока строку и дважды вызовите функцию (с выводом
# # результата ее работы на экран):
# # первый раз только со строкой;
# # второй раз со строкой и именованным аргументом tag со значением 'div'.
# def dif_str(str_in, div='h1'):
#
#     return f'<{div}>{str_in}</{div}>'
#
# str_in = input()
#
# print(dif_str(str_in))
# print(dif_str(str_in, 'div'))

# # другое решение ученика
# def tagged_st(st, tag='<h1>'):
#     return tag + st + tag.replace('<', '</')
#
#
# st = input()
# print(tagged_st(st))
# print(tagged_st(st, tag='<div>'))

# # ______  Задание 226  ______
# # В функцию из предыдущего подвига 5 добавьте в конец еще один третий формальный параметр up с начальным булевым
# # значением True. Если параметр up равен True, то тег, указанный в формальном параметре tag, следует записывать заглавными
# # буквами, а иначе малыми.
# # После объявления функции далее в программе прочитайте из входного потока строку и дважды вызовите функцию (с выводом
# # результата ее работы на экран):
# # первый раз со строкой и именованным аргументом tag со значением 'div';
# # второй раз со строкой, именованным аргументом tag со значением 'div' и именованным аргументом up со значением False.
# def dif_str(str_in, div='h1', up=True):
#     if up:
#         new_str = f'<{div.upper()}>{str_in}</{div.upper()}>'
#     else:
#         new_str = f'<{div.lower()}>{str_in}</{div.lower()}>'
#
#     return new_str
#
# str_in = input()
#
# print(dif_str(str_in, 'div'))
# print(dif_str(str_in, 'div', False))

# решение другого ученика
# def enclosure(html, tag='h1', up=True):
#     return '<{1}>{0}</{1}>'.format(html, tag.upper() if up == True else tag)
#
# html = input()
# print(enclosure(html, tag='div'))
# print(enclosure(html, tag='div', up=False))

# # решение другого ученика
# def set_tag(st, tag='h1', up=True):
#     return (f'<{tag.upper()}>{st}</{tag.upper()}>'
#             if up else
#             f'<{tag}>{st}</{tag}>')
#
# st = input()
# print(set_tag(st, tag='div'))
# print(set_tag(st, tag='div', up=False))

# # ______  Задание 227  ______
# # Объявите в программе функцию с именем get_even, которая способна принимать произвольное количество чисел в качестве
# # аргументов. Например: get_even(1, 2, 3, -5, 10, 8) Функция должна возвращать список, составленный только из четных
# # переданных ей значений. P.S. Функцию вызывать не нужно, только определить.
# def get_even(*args):
#     lst = [i for i in args if i % 2 == 0]
#
#     return lst

# # ______  Задание 228  ______
# # Объявите в программе функцию с именем get_biggest_city, которой можно передавать произвольное количество названий
# # городов (строк) через аргументы. Например:
# # get_biggest_city('Город 1', 'Город 2', 'Город 3', 'Город 4')
# # Данная функция должна возвращать название города (строку) наибольшей длины. Если таких городов несколько, то первый
# # переданный (из наибольших). Программу реализовать без использования сортировки.
# # P.S. Функцию выполнять не нужно, только определить.
# def get_biggest_city(*args):
#     key = {}
#
#     for i in args:
#         if len(i) not in key:
#             key[len(i)] = i
#
#     return key[max(key)]

# # ______  Задание 229  ______
# # Объявите в программе функцию с именем get_data_fig для вычисления периметра произвольного N-угольника. На вход этой
# # функции передаются N длин сторон через ее аргументы. Дополнительно могут быть указаны именованные аргументы:
# # tp - булево значение True/False;
# # color - целое числовое значение;
# # closed - булево значение True/False;
# # width - вещественное значение.
# # Функция должна возвращать в виде кортежа периметр многоугольника и указанные значения именованных параметров в порядке
# # их перечисления в тексте задания (если они были переданы). Если какой-либо параметр отсутствует, его возвращать не нужно
# # (пропустить).
# # P.S. Функцию выполнять не нужно, только объявить.
# def get_data_fig(*args, **kwars):
#     counter = 0
#     for i in args:
#         counter += i
#     lst  = [i for i in kwars]
#     tpl = ()
#     for i in ('tp', 'color', 'closed', 'width'):
#         if i in lst:
#             tpl += (kwars[i],)
#     tpl2 = (counter,) + tpl
#
#     return tpl2

# # решение другого ученика
# def get_data_fig(*args, **kwargs):
#     kwargs = [kwargs[i] for i in ['type', 'color', 'closed', 'width'] if i in kwargs]
#     return (sum(args), *kwargs)

# # решение другого ученика
# def get_data_fig(*n, type=None, color=None, closed=None, width=None):
#     res = (sum(n),) + tuple(key for key in [type, color, closed, width] if key != None)
#     return res

# # ______  Задание 230  ______
# # (Для закрепления предыдущего материала). На вход программе подается таблица целых чисел (см. пример ниже) размером
# # N x N элементов (N определяется по входным данным). Необходимо прочитать эти числа и сохранить в виде двумерного
# # (вложенного) списка lst2D размером N x N элементов. Полученная таблица будет содержать нули и кое-где единицы. С помощью
# # функции с именем verify, на вход которой подается двумерный список чисел (первый параметр), необходимо проверить,
# # являются ли единицы изолированными друг от друга, то есть, вокруг каждой единицы должны быть нули.
# # Рекомендуется следующий алгоритм. В функции verify производить перебор двумерного списка. Для каждого элемента (списка)
# # со значением 1 вызывать еще одну вспомогательную функцию is_isolate для проверки изолированности единицы. То есть,
# # функция is_isolate должна возвращать True, если единица изолирована и False в противном случае.
# # Как только встречается не изолированная единица, функция verify должна возвращать False. Если успешно доходим (по
# # элементам списка) до конца, то возвращается значение True
# # Функцию verify выполнять не нужно, только объявить.
# # P. S. При реализации функции is_isolate не следует прописывать восемь операторов if. Подумайте, как это можно сделать
# # красивее (с точки зрения реализации алгоритма).
#
# def is_isolate(*args):
#     lst2D, i, j = args
#     return lst2D[i][j] + lst2D[i][j + 1] + lst2D[i + 1][j] + lst2D[i + 1][j + 1] > 1
#
# def verify(lst2D):
#
#     flag = True
#     for i in range(len(lst2D) - 1):
#         if flag:
#             for j in range(len(lst2D) - 1):
#                 if is_isolate(lst2D, i, j):
#                     flag = False
#                     return False
#
#         else:
#             break
#     if flag:
#         return True
#
# # lines =  ['1 0 0 0 0\n', '0 0 1 0 0\n', '0 0 0 0 0\n', '0 1 0 1 0\n', '0 0 0 0 0\n']
# # lines =  ['1 0 0 0 0 0\n', '0 0 1 0 0 1\n', '0 0 1 0 0 1\n', '0 1 0 1 0 0\n', '0 0 0 0 0 1\n', '0 0 0 0 0 0\n']
# lst2D = [[int(j) for j in i.replace('\n','').split(' ')] for i in lines]
# # print(lst2D)
#
# # print(verify(lst2D))

# # ______  Задание 231  ______
# # (Для закрепления предыдущего материала). Объявите в программе функцию с именем str_min, которая сравнивает две
# # переданные строки (через два первых параметра) и возвращает минимальную из них (то есть, выполняется лексикографическое
# # сравнение строк). Следом объявите еще две аналогичные функции:
# # с именем str_min3 для поиска минимальной строки из трех переданных строк;
# # с именем str_min4 для поиска минимальной строки из четырех переданных строк.
# # Причем при реализации функций str_min3 и str_min4 следует использовать вызов (результат работы) функции str_min.
# # P.S. Выполнять функции не нужно, только объявить.
# def str_min(str1, str2):
#     return min(str1, str2)
#
# def str_min3(str1, str2, str3):
#     return min(str1, str_min(str2, str3))
#
# def str_min4(str1, str2, str3, str4):
#     return min(str1, str_min(str4, str_min(str2, str3)))

# # ______  Задание 232  ______
# # На вход программе подаются семь целых чисел, записанных в одну строчку через пробел. Необходимо их прочитать и первые
# # четыре числа занести в переменную (список) lst, а остальные три в отдельные переменные x, y, z. Сделать это нужно с
# # использованием оператора упаковки. Вывести список lst на экран с помощью команды:
# # print(*lst)
# *lst, x, y, z = list(map(int, input().split()))
# print(*lst)

# # ______  Задание 233  ______
# # На вход программе подается строка с названиями городов, записанных в одну строчку через пробел. Необходимо прочитать
# # эту строку и на ее основе сформировать список из названий городов. Затем, используя оператор распаковки *, преобразовать
# # этот список в кортеж lst_c. Результат вывести на экран командой:
# # print(lst_c)
# lst_c = (*list(input().split()),)
# print(lst_c)

# # ______  Задание 234  ______
# # На вход программе подаются два целых числа a и b (a < b), записанные в одну строчку через пробел. Необходимо их прочитать
# # и сформировать список lst из целых чисел в диапазоне от a до b (включительно) с шагом 1, используя функцию range,
# # оператор [] и оператор распаковки *. Вывести полученный список на экран командой:
# # print(*lst)
# a, b = [*map(int, input().split())]
# lst = [*range(a, b + 1)]
# print(*lst)

# # решение другого ученика
# lst = list(map(int, input().split()))
# lst[-1] += 1
# print(*range(*lst))

# # решение другого ученика
# a = *(map(int, input().split())),
# print(*range(a[0], a[-1] + 1))

# # ______  Задание 235  ______
# #  На вход программе подаются вещественные числа и следующей строкой названия городов, записанные через пробел.
# #  Необходимо прочитать числа, сохранить их в виде списка. Затем, прочитать строку с названиями городов и сформировать
# #  на ее основе еще один список. После этого сформировать единый список lst, в котором сначала идут числа, а затем, названия городов.
# # Объединение списков реализовать с использованием оператора распаковки *. Вывести полученный список lst на экран командой:
# # print(*lst)
# lst1 = [*map(float, input().split())]
# lst2 = input().split()
# lst = [*lst1, *lst2]
# print(*lst)

# # ______  Задание 236  ______
# # Объявите в программе словарь, содержащий следующие пункты меню:
# # menu = {'Главная': 'home', 'Архив': 'archive', 'Новости': 'news'}
# # Дополнительно на вход программе подаются еще пункты меню в виде строк в формате:
# # название_1=url_1
# # ...
# # название_N=url_N
# # В программе уже реализовано их считывание и сохранение в списке:
# # lst_in = list(map(str.strip, sys.stdin.readlines()))
# # Необходимо информацию из списка lst_in преобразовать в словарь того же формата, что и menu, и добавить в конец словаря menu,
# # используя оператор распаковки для словарей. На результирующий словарь должна вести переменная menu.
# # P.S. В программе ничего выводить на экран не нужно! Только сформировать словарь menu.
# menu = {'Главная': 'home', 'Архив': 'archive', 'Новости': 'news'}
# # lst_in = ['Города=about-cities', 'Машины=read-of-cars', 'Самолеты=airplanes']
# a = {}
# for i in lst_in:
#     i, j = i.split('=')
#     a[i] = j
# menu = {**a, **menu}

# # ______  Задание 237  ______
# # На вход программе подается целое положительное число N. Необходимо написать рекурсивную функцию с именем get_rec_N,
# # которая отображает на экране последовательность целых чисел от 1 до N (включительно). Каждое число выводится с новой строки.
# # В качестве единственного параметра функция get_rec_N должна принимать числовое значение. Начальный вызов функции уже
# # дан в программе и выглядит так:
# # get_rec_N(N)
# N = int(input())
#
# def get_rec_N(n):
#     if n != 1:
#         get_rec_N(n - 1)
#     print(n)
#
# get_rec_N(N)

# # ______  Задание 238  ______
# #  На вход программе подаются целые числа, записанные через пробел. Необходимо их прочитать и сохранить в виде списка
# #  (или кортежа). Затем, объявить рекурсивную функцию с именем get_rec_sum для вычисления суммы прочитанных чисел.
# #  То есть, функция get_rec_sum в итоге должна возвращать значение суммы. (Выводить на экран она ничего не должна).
# #  Первым параметром в функцию следует передавать список чисел. Остальные параметры продумайте самостоятельно.
# # Вызовите функцию get_rec_sum и выведите на экран значение суммы, которое она вернула.
# def get_rec_sum(lst):
#     n, *lst = lst
#     if len(lst) == 1:
#         return n + lst[0]
#     else:
#         return n + get_rec_sum(lst)
#
# lst = list(map(int, input().split()))
#
# print(get_rec_sum(lst))

# решение другого ученика
# lst1 = [int(i) for i in input().split()]
#
# def get_rec_sum(lst):
#     head, *tail = lst
#     return head + get_rec_sum(tail) if tail else head
#
# print(get_rec_sum(lst1))






